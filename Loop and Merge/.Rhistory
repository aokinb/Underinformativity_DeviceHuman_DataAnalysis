values <- c()
# Loop through each row (corresponding to each subject) and collect their responses
for (i in 1:nrow(df)) {
print(i)
temp <- test[i,]
for (j in 1:ncol(temp)) {
# Only select rows that are not empty
if (as.character(temp[1, j]) != "") {
# Make all words lowercase and remove spaces
rating <- as.numeric(as.character(temp[1, j]))
values <- c(values, rating)
}
}
}
# Create empty vectors where subject, list, and question info will be placed
subject <- c()
sheet <- c()
order <- c()
question <- c()
Q13 <- c()
Q14 <- c()
Q15 <- c()
Q16 <- c()
Q17 <- c()
Q19 <- c()
Q20 <- c()
Q21 <- c()
Q22 <- c()
Q23 <- c()
Q24 <- c()
Q25 <- c()
Q26 <- c()
# Loop through each row (corresponding to each subject)
for (j in 1:nrow(df)) {
print(j)
# For each subject, save their subject numbers, lists, and questions
subject_list <- rep(as.character(j), 120)
sheet_list <- rep(as.character(df[j,]$Sheet), 120)
order_list <- rep(as.character(df[j,]$Order), 120)
question_list <- as.character(1:120)
Q13_list <- rep(as.character(df[j,]$Q13_1), 120)
Q14_list <- rep(as.character(df[j,]$Q14_1), 120)
Q15_list <- rep(as.character(df[j,]$Q15_1), 120)
Q16_list <- rep(as.character(df[j,]$Q16_1), 120)
Q17_list <- rep(as.character(df[j,]$Q17_1), 120)
Q19_list <- rep(as.character(df[j,]$Q19), 120)
Q20_list <- rep(as.character(df[j,]$Q20), 120)
Q21_list <- rep(as.character(df[j,]$Q21), 120)
Q22_list <- rep(as.character(df[j,]$Q22), 120)
Q23_list <- rep(as.character(df[j,]$Q23), 120)
Q24_list <- rep(as.character(df[j,]$Q24), 120)
Q25_list <- rep(as.character(df[j,]$Q25), 120)
Q26_list <- rep(as.character(df[j,]$Q26), 120)
# Add the subject numbers, lists, and questions to the empty vectors
subject <- c(subject, subject_list)
sheet <- c(sheet, sheet_list)
order <- c(order, order_list)
question <- c(question, question_list)
Q13 <- c(Q13, Q13_list)
Q14 <- c(Q14, Q14_list)
Q15 <- c(Q15, Q15_list)
Q16 <- c(Q16, Q16_list)
Q17 <- c(Q17, Q17_list)
Q19 <- c(Q19, Q19_list)
Q20 <- c(Q20, Q20_list)
Q21 <- c(Q21, Q21_list)
Q22 <- c(Q22, Q22_list)
Q23 <- c(Q23, Q23_list)
Q24 <- c(Q24, Q24_list)
Q25 <- c(Q25, Q25_list)
Q26 <- c(Q26, Q26_list)
}
# Bind the created vectors within a new data frame
df1 <- as.data.frame(cbind(subject, question, sheet, order, values,
Q13, Q14, Q15, Q16, Q17, Q19,
Q20, Q21, Q22, Q23, Q24, Q25, Q26))
#------------------------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------------------
# Load the loop and merge lists that were used for counterbalancing
setwd("~/Desktop/UCDavis/PhoneticsLab/Winter_2022/Winter_2022_Underinformativeness_TopDown_Congruency_Gradience")
setwd("Loop and Merge")
# Load the 6 lists used for counterbalancing
sheet1_human <- as.data.frame(read_excel("Underinformative_Sheet1.xlsx", sheet = "Human"))
sheet1_furhat <- as.data.frame(read_excel("Underinformative_Sheet1.xlsx", sheet = "Furhat"))
sheet1_cylinder <- as.data.frame(read_excel("Underinformative_Sheet1.xlsx", sheet = "Cylinder"))
sheet1 <- rbind(sheet1_human, sheet1_furhat, sheet1_cylinder)
sheet2_human <- as.data.frame(read_excel("Underinformative_Sheet2.xlsx", sheet = "Human"))
sheet2_furhat <- as.data.frame(read_excel("Underinformative_Sheet2.xlsx", sheet = "Furhat"))
sheet2_cylinder <- as.data.frame(read_excel("Underinformative_Sheet2.xlsx", sheet = "Cylinder"))
sheet2 <- rbind(sheet2_human, sheet2_furhat, sheet2_cylinder)
sheet3_human <- as.data.frame(read_excel("Underinformative_Sheet3.xlsx", sheet = "Human"))
sheet3_furhat <- as.data.frame(read_excel("Underinformative_Sheet3.xlsx", sheet = "Furhat"))
sheet3_cylinder <- as.data.frame(read_excel("Underinformative_Sheet3.xlsx", sheet = "Cylinder"))
sheet3 <- rbind(sheet3_human, sheet3_furhat, sheet3_cylinder)
sheet4_human <- as.data.frame(read_excel("Underinformative_Sheet4.xlsx", sheet = "Human"))
sheet4_furhat <- as.data.frame(read_excel("Underinformative_Sheet4.xlsx", sheet = "Furhat"))
sheet4_cylinder <- as.data.frame(read_excel("Underinformative_Sheet4.xlsx", sheet = "Cylinder"))
sheet4 <- rbind(sheet4_human, sheet4_furhat, sheet4_cylinder)
sheet5_human <- as.data.frame(read_excel("Underinformative_Sheet5.xlsx", sheet = "Human"))
sheet5_furhat <- as.data.frame(read_excel("Underinformative_Sheet5.xlsx", sheet = "Furhat"))
sheet5_cylinder <- as.data.frame(read_excel("Underinformative_Sheet5.xlsx", sheet = "Cylinder"))
sheet5 <- rbind(sheet5_human, sheet5_furhat, sheet5_cylinder)
sheet6_human <- as.data.frame(read_excel("Underinformative_Sheet6.xlsx", sheet = "Human"))
sheet6_furhat <- as.data.frame(read_excel("Underinformative_Sheet6.xlsx", sheet = "Furhat"))
sheet6_cylinder <- as.data.frame(read_excel("Underinformative_Sheet6.xlsx", sheet = "Cylinder"))
sheet6 <- rbind(sheet6_human, sheet6_furhat, sheet6_cylinder)
#------------------------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------------------
# For each of the 6 lists, create a data frame matching the type and guise for each question to the prior data frame
df_sheet1 <- df1 %>% filter(sheet=="1")
df_sheet1_num <- nrow(df_sheet1)/120
df_sheet1 <- cbind(df_sheet1, rep(sheet1$Sentence, df_sheet1_num),
rep(sheet1$Type, df_sheet1_num),
rep(sheet1$Guise, df_sheet1_num))
colnames(df_sheet1) <- c("subject", "question", "sheet", "order", "rating",
"Q13", "Q14", "Q15", "Q16", "Q17", "Q19", "Q20", "Q21", "Q22",
"Q23", "Q24", "Q25", "Q26",
"sentence", "type", "guise")
df_sheet2 <- df1 %>% filter(sheet=="2")
df_sheet2_num <- nrow(df_sheet2)/120
df_sheet2 <- cbind(df_sheet2, rep(sheet2$Sentence, df_sheet2_num),
rep(sheet2$Type, df_sheet2_num),
rep(sheet2$Guise, df_sheet2_num))
colnames(df_sheet2) <- c("subject", "question", "sheet", "order", "rating",
"Q13", "Q14", "Q15", "Q16", "Q17", "Q19", "Q20", "Q21", "Q22",
"Q23", "Q24", "Q25", "Q26",
"sentence", "type", "guise")
df_sheet3 <- df1 %>% filter(sheet=="3")
df_sheet3_num <- nrow(df_sheet3)/120
df_sheet3 <- cbind(df_sheet3, rep(sheet3$Sentence, df_sheet3_num),
rep(sheet3$Type, df_sheet3_num),
rep(sheet3$Guise, df_sheet3_num))
colnames(df_sheet3) <- c("subject", "question", "sheet", "order", "rating",
"Q13", "Q14", "Q15", "Q16", "Q17", "Q19", "Q20", "Q21", "Q22",
"Q23", "Q24", "Q25", "Q26",
"sentence", "type", "guise")
df_sheet4 <- df1 %>% filter(sheet=="4")
df_sheet4_num <- nrow(df_sheet4)/120
df_sheet4 <- cbind(df_sheet4, rep(sheet4$Sentence, df_sheet4_num),
rep(sheet4$Type, df_sheet4_num),
rep(sheet4$Guise, df_sheet4_num))
colnames(df_sheet4) <- c("subject", "question", "sheet", "order", "rating",
"Q13", "Q14", "Q15", "Q16", "Q17", "Q19", "Q20", "Q21", "Q22",
"Q23", "Q24", "Q25", "Q26",
"sentence", "type", "guise")
df_sheet5 <- df1 %>% filter(sheet=="5")
df_sheet5_num <- nrow(df_sheet5)/120
df_sheet5 <- cbind(df_sheet5, rep(sheet5$Sentence, df_sheet5_num),
rep(sheet5$Type, df_sheet5_num),
rep(sheet5$Guise, df_sheet5_num))
colnames(df_sheet5) <- c("subject", "question", "sheet", "order", "rating",
"Q13", "Q14", "Q15", "Q16", "Q17", "Q19", "Q20", "Q21", "Q22",
"Q23", "Q24", "Q25", "Q26",
"sentence", "type", "guise")
df_sheet6 <- df1 %>% filter(sheet=="6")
df_sheet6_num <- nrow(df_sheet6)/120
df_sheet6 <- cbind(df_sheet6, rep(sheet6$Sentence, df_sheet6_num),
rep(sheet6$Type, df_sheet6_num),
rep(sheet6$Guise, df_sheet6_num))
colnames(df_sheet6) <- c("subject", "question", "sheet", "order", "rating",
"Q13", "Q14", "Q15", "Q16", "Q17", "Q19", "Q20", "Q21", "Q22",
"Q23", "Q24", "Q25", "Q26",
"sentence", "type", "guise")
# Bind all of the lists together
final <- rbind(df_sheet1, df_sheet2, df_sheet3,
df_sheet4, df_sheet5, df_sheet6)
# Change the rating column to the numeric type
final$rating <- as.numeric(as.character(final$rating))
final <- final[final$subject %!in% c(5, 8, 9, 10, 18, 19, 20, 22, 25, 26, 27, 29, 30,
34, 45, 46, 50, 54, 55, 59, 62, 64, 68, 69, 76, 78,
83, 86, 87, 90, 91, 103, 108),]
# Remove participants who did not show a significant difference in rating between the TA and FA types
final <- final[final$subject %!in% c(3, 4, 17, 32, 37, 38, 39, 61, 74, 82, 106, 109),]
# Remove the participant who changed rating strategies in the middle of the experiment
final <- final[final$subject %!in% c(7),]
rating_by_type_question <- as.data.frame(final %>% group_by(sentence, type) %>% summarize(mean(rating)))
colnames(rating_by_type_question) <- c("Sentence", "Type", "Rating")
median(rating_by_type_question[rating_by_type_question$Type=="FA",]$Rating) - 2*mad(rating_by_type_question[rating_by_type_question$Type=="FA",]$Rating)
median(rating_by_type_question[rating_by_type_question$Type=="FA",]$Rating) + 2*mad(rating_by_type_question[rating_by_type_question$Type=="FA",]$Rating)
sort(rating_by_type_question[rating_by_type_question$Type=="FA",]$Rating)
median(rating_by_type_question[rating_by_type_question$Type=="UI",]$Rating) - 2*mad(rating_by_type_question[rating_by_type_question$Type=="UI",]$Rating)
median(rating_by_type_question[rating_by_type_question$Type=="UI",]$Rating) + 2*mad(rating_by_type_question[rating_by_type_question$Type=="UI",]$Rating)
sort(rating_by_type_question[rating_by_type_question$Type=="UI",]$Rating)
median(rating_by_type_question[rating_by_type_question$Type=="TA",]$Rating) - 2*mad(rating_by_type_question[rating_by_type_question$Type=="TA",]$Rating)
median(rating_by_type_question[rating_by_type_question$Type=="TA",]$Rating) + 2*mad(rating_by_type_question[rating_by_type_question$Type=="TA",]$Rating)
sort(rating_by_type_question[rating_by_type_question$Type=="TA",]$Rating)
median(rating_by_type_question[rating_by_type_question$Type=="TS",]$Rating) - 2*mad(rating_by_type_question[rating_by_type_question$Type=="TS",]$Rating)
median(rating_by_type_question[rating_by_type_question$Type=="TS",]$Rating) + 2*mad(rating_by_type_question[rating_by_type_question$Type=="TS",]$Rating)
sort(rating_by_type_question[rating_by_type_question$Type=="TS",]$Rating)
#------
final <- final[final$sentence %!in% c("All trees have leaves.",
"Some greenhouses grow plants.",
"Some birds can talk.",
"Some gyms have machines.",
"Some airports have security screening.",
"Some monkeys have two hands with thumbs."),]
m7 <- lmer(rating ~ type*guise + (1 | subject) + (1 | sentence), data=final[final$sentence %!in% c("All trees have leaves.",
"Some greenhouses grow plants.",
"Some birds can talk.",
"Some gyms have machines.") & final$subject!="84",])
summary(m7)
final$guise <- factor(final$guise, levels = c("Human", "Cylinder", "Furhat"))
final$type <- factor(final$type, levels = c("UI", "FA", "TA", "TS"))
# Statistical models w/ sum coding
m7 <- lmer(rating ~ type*guise + (1 | subject) + (1 | sentence), data=final[final$sentence %!in% c("All trees have leaves.",
"Some greenhouses grow plants.",
"Some birds can talk.",
"Some gyms have machines.") & final$subject!="84",])
summary(m7)
7410/114
unique(final$subject)
sort(unique(final$subject))
m7 <- lmer(rating ~ type*guise + (1 | subject) + (1 | sentence), data=final[final$sentence %!in% c("All trees have leaves.",
"Some greenhouses grow plants.",
"Some birds can talk.",
"Some gyms have machines."),])
summary(m7)
# Create a "not in" operator (to be used later on)
`%!in%` <- Negate(`%in%`)
#------------------------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------------------
# Load the csv file from Qualtrics
setwd("~/Desktop/UCDavis/PhoneticsLab/Winter_2022/Winter_2022_Underinformativeness_TopDown_Congruency_Gradience")
setwd("Data Frames")
df <- read.csv("Underinformativeness TopDownCongruencyGradience (Winter 2022)_March 3, 2022_00.46.csv")
df <- df[c(4:nrow(df)),]
# Select the columns w/ the ratings
test <- df[,c(22:61, 64:103, 106:745)]
# Create an empty vector where the inputted words will be placed
values <- c()
# Loop through each row (corresponding to each subject) and collect their responses
for (i in 1:nrow(df)) {
print(i)
temp <- test[i,]
for (j in 1:ncol(temp)) {
# Only select rows that are not empty
if (as.character(temp[1, j]) != "") {
# Make all words lowercase and remove spaces
rating <- as.numeric(as.character(temp[1, j]))
values <- c(values, rating)
}
}
}
# Create empty vectors where subject, list, and question info will be placed
subject <- c()
sheet <- c()
order <- c()
question <- c()
Q13 <- c()
Q14 <- c()
Q15 <- c()
Q16 <- c()
Q17 <- c()
Q19 <- c()
Q20 <- c()
Q21 <- c()
Q22 <- c()
Q23 <- c()
Q24 <- c()
Q25 <- c()
Q26 <- c()
# Loop through each row (corresponding to each subject)
for (j in 1:nrow(df)) {
print(j)
# For each subject, save their subject numbers, lists, and questions
subject_list <- rep(as.character(j), 120)
sheet_list <- rep(as.character(df[j,]$Sheet), 120)
order_list <- rep(as.character(df[j,]$Order), 120)
question_list <- as.character(1:120)
Q13_list <- rep(as.character(df[j,]$Q13_1), 120)
Q14_list <- rep(as.character(df[j,]$Q14_1), 120)
Q15_list <- rep(as.character(df[j,]$Q15_1), 120)
Q16_list <- rep(as.character(df[j,]$Q16_1), 120)
Q17_list <- rep(as.character(df[j,]$Q17_1), 120)
Q19_list <- rep(as.character(df[j,]$Q19), 120)
Q20_list <- rep(as.character(df[j,]$Q20), 120)
Q21_list <- rep(as.character(df[j,]$Q21), 120)
Q22_list <- rep(as.character(df[j,]$Q22), 120)
Q23_list <- rep(as.character(df[j,]$Q23), 120)
Q24_list <- rep(as.character(df[j,]$Q24), 120)
Q25_list <- rep(as.character(df[j,]$Q25), 120)
Q26_list <- rep(as.character(df[j,]$Q26), 120)
# Add the subject numbers, lists, and questions to the empty vectors
subject <- c(subject, subject_list)
sheet <- c(sheet, sheet_list)
order <- c(order, order_list)
question <- c(question, question_list)
Q13 <- c(Q13, Q13_list)
Q14 <- c(Q14, Q14_list)
Q15 <- c(Q15, Q15_list)
Q16 <- c(Q16, Q16_list)
Q17 <- c(Q17, Q17_list)
Q19 <- c(Q19, Q19_list)
Q20 <- c(Q20, Q20_list)
Q21 <- c(Q21, Q21_list)
Q22 <- c(Q22, Q22_list)
Q23 <- c(Q23, Q23_list)
Q24 <- c(Q24, Q24_list)
Q25 <- c(Q25, Q25_list)
Q26 <- c(Q26, Q26_list)
}
# Bind the created vectors within a new data frame
df1 <- as.data.frame(cbind(subject, question, sheet, order, values,
Q13, Q14, Q15, Q16, Q17, Q19,
Q20, Q21, Q22, Q23, Q24, Q25, Q26))
#------------------------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------------------
# Load the loop and merge lists that were used for counterbalancing
setwd("~/Desktop/UCDavis/PhoneticsLab/Winter_2022/Winter_2022_Underinformativeness_TopDown_Congruency_Gradience")
setwd("Loop and Merge")
# Load the 6 lists used for counterbalancing
sheet1_human <- as.data.frame(read_excel("Underinformative_Sheet1.xlsx", sheet = "Human"))
sheet1_furhat <- as.data.frame(read_excel("Underinformative_Sheet1.xlsx", sheet = "Furhat"))
sheet1_cylinder <- as.data.frame(read_excel("Underinformative_Sheet1.xlsx", sheet = "Cylinder"))
sheet1 <- rbind(sheet1_human, sheet1_furhat, sheet1_cylinder)
sheet2_human <- as.data.frame(read_excel("Underinformative_Sheet2.xlsx", sheet = "Human"))
sheet2_furhat <- as.data.frame(read_excel("Underinformative_Sheet2.xlsx", sheet = "Furhat"))
sheet2_cylinder <- as.data.frame(read_excel("Underinformative_Sheet2.xlsx", sheet = "Cylinder"))
sheet2 <- rbind(sheet2_human, sheet2_furhat, sheet2_cylinder)
sheet3_human <- as.data.frame(read_excel("Underinformative_Sheet3.xlsx", sheet = "Human"))
sheet3_furhat <- as.data.frame(read_excel("Underinformative_Sheet3.xlsx", sheet = "Furhat"))
sheet3_cylinder <- as.data.frame(read_excel("Underinformative_Sheet3.xlsx", sheet = "Cylinder"))
sheet3 <- rbind(sheet3_human, sheet3_furhat, sheet3_cylinder)
sheet4_human <- as.data.frame(read_excel("Underinformative_Sheet4.xlsx", sheet = "Human"))
sheet4_furhat <- as.data.frame(read_excel("Underinformative_Sheet4.xlsx", sheet = "Furhat"))
sheet4_cylinder <- as.data.frame(read_excel("Underinformative_Sheet4.xlsx", sheet = "Cylinder"))
sheet4 <- rbind(sheet4_human, sheet4_furhat, sheet4_cylinder)
sheet5_human <- as.data.frame(read_excel("Underinformative_Sheet5.xlsx", sheet = "Human"))
sheet5_furhat <- as.data.frame(read_excel("Underinformative_Sheet5.xlsx", sheet = "Furhat"))
sheet5_cylinder <- as.data.frame(read_excel("Underinformative_Sheet5.xlsx", sheet = "Cylinder"))
sheet5 <- rbind(sheet5_human, sheet5_furhat, sheet5_cylinder)
sheet6_human <- as.data.frame(read_excel("Underinformative_Sheet6.xlsx", sheet = "Human"))
sheet6_furhat <- as.data.frame(read_excel("Underinformative_Sheet6.xlsx", sheet = "Furhat"))
sheet6_cylinder <- as.data.frame(read_excel("Underinformative_Sheet6.xlsx", sheet = "Cylinder"))
sheet6 <- rbind(sheet6_human, sheet6_furhat, sheet6_cylinder)
#------------------------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------------------
# For each of the 6 lists, create a data frame matching the type and guise for each question to the prior data frame
df_sheet1 <- df1 %>% filter(sheet=="1")
df_sheet1_num <- nrow(df_sheet1)/120
df_sheet1 <- cbind(df_sheet1, rep(sheet1$Sentence, df_sheet1_num),
rep(sheet1$Type, df_sheet1_num),
rep(sheet1$Guise, df_sheet1_num))
colnames(df_sheet1) <- c("subject", "question", "sheet", "order", "rating",
"Q13", "Q14", "Q15", "Q16", "Q17", "Q19", "Q20", "Q21", "Q22",
"Q23", "Q24", "Q25", "Q26",
"sentence", "type", "guise")
df_sheet2 <- df1 %>% filter(sheet=="2")
df_sheet2_num <- nrow(df_sheet2)/120
df_sheet2 <- cbind(df_sheet2, rep(sheet2$Sentence, df_sheet2_num),
rep(sheet2$Type, df_sheet2_num),
rep(sheet2$Guise, df_sheet2_num))
colnames(df_sheet2) <- c("subject", "question", "sheet", "order", "rating",
"Q13", "Q14", "Q15", "Q16", "Q17", "Q19", "Q20", "Q21", "Q22",
"Q23", "Q24", "Q25", "Q26",
"sentence", "type", "guise")
df_sheet3 <- df1 %>% filter(sheet=="3")
df_sheet3_num <- nrow(df_sheet3)/120
df_sheet3 <- cbind(df_sheet3, rep(sheet3$Sentence, df_sheet3_num),
rep(sheet3$Type, df_sheet3_num),
rep(sheet3$Guise, df_sheet3_num))
colnames(df_sheet3) <- c("subject", "question", "sheet", "order", "rating",
"Q13", "Q14", "Q15", "Q16", "Q17", "Q19", "Q20", "Q21", "Q22",
"Q23", "Q24", "Q25", "Q26",
"sentence", "type", "guise")
df_sheet4 <- df1 %>% filter(sheet=="4")
df_sheet4_num <- nrow(df_sheet4)/120
df_sheet4 <- cbind(df_sheet4, rep(sheet4$Sentence, df_sheet4_num),
rep(sheet4$Type, df_sheet4_num),
rep(sheet4$Guise, df_sheet4_num))
colnames(df_sheet4) <- c("subject", "question", "sheet", "order", "rating",
"Q13", "Q14", "Q15", "Q16", "Q17", "Q19", "Q20", "Q21", "Q22",
"Q23", "Q24", "Q25", "Q26",
"sentence", "type", "guise")
df_sheet5 <- df1 %>% filter(sheet=="5")
df_sheet5_num <- nrow(df_sheet5)/120
df_sheet5 <- cbind(df_sheet5, rep(sheet5$Sentence, df_sheet5_num),
rep(sheet5$Type, df_sheet5_num),
rep(sheet5$Guise, df_sheet5_num))
colnames(df_sheet5) <- c("subject", "question", "sheet", "order", "rating",
"Q13", "Q14", "Q15", "Q16", "Q17", "Q19", "Q20", "Q21", "Q22",
"Q23", "Q24", "Q25", "Q26",
"sentence", "type", "guise")
df_sheet6 <- df1 %>% filter(sheet=="6")
df_sheet6_num <- nrow(df_sheet6)/120
df_sheet6 <- cbind(df_sheet6, rep(sheet6$Sentence, df_sheet6_num),
rep(sheet6$Type, df_sheet6_num),
rep(sheet6$Guise, df_sheet6_num))
colnames(df_sheet6) <- c("subject", "question", "sheet", "order", "rating",
"Q13", "Q14", "Q15", "Q16", "Q17", "Q19", "Q20", "Q21", "Q22",
"Q23", "Q24", "Q25", "Q26",
"sentence", "type", "guise")
# Bind all of the lists together
final <- rbind(df_sheet1, df_sheet2, df_sheet3,
df_sheet4, df_sheet5, df_sheet6)
# Change the rating column to the numeric type
final$rating <- as.numeric(as.character(final$rating))
final <- final[final$subject %!in% c(5, 8, 9, 10, 18, 19, 20, 22, 25, 26, 27, 29, 30,
34, 45, 46, 50, 54, 55, 59, 62, 64, 68, 69, 76, 78,
83, 84, 86, 87, 90, 91, 103, 108),]
final <- final[final$subject %!in% c(3, 4, 17, 32, 37, 38, 39, 61, 74, 82, 106, 109),]
# Remove the participant who changed rating strategies in the middle of the experiment
final <- final[final$subject %!in% c(7),]
#------------
rating_by_type_question <- as.data.frame(final %>% group_by(sentence, type) %>% summarize(mean(rating)))
colnames(rating_by_type_question) <- c("Sentence", "Type", "Rating")
median(rating_by_type_question[rating_by_type_question$Type=="FA",]$Rating) - 2*mad(rating_by_type_question[rating_by_type_question$Type=="FA",]$Rating)
median(rating_by_type_question[rating_by_type_question$Type=="FA",]$Rating) + 2*mad(rating_by_type_question[rating_by_type_question$Type=="FA",]$Rating)
sort(rating_by_type_question[rating_by_type_question$Type=="FA",]$Rating)
median(rating_by_type_question[rating_by_type_question$Type=="UI",]$Rating) - 2*mad(rating_by_type_question[rating_by_type_question$Type=="UI",]$Rating)
median(rating_by_type_question[rating_by_type_question$Type=="UI",]$Rating) + 2*mad(rating_by_type_question[rating_by_type_question$Type=="UI",]$Rating)
sort(rating_by_type_question[rating_by_type_question$Type=="UI",]$Rating)
median(rating_by_type_question[rating_by_type_question$Type=="TA",]$Rating) - 2*mad(rating_by_type_question[rating_by_type_question$Type=="TA",]$Rating)
median(rating_by_type_question[rating_by_type_question$Type=="TA",]$Rating) + 2*mad(rating_by_type_question[rating_by_type_question$Type=="TA",]$Rating)
sort(rating_by_type_question[rating_by_type_question$Type=="TA",]$Rating)
median(rating_by_type_question[rating_by_type_question$Type=="TS",]$Rating) - 2*mad(rating_by_type_question[rating_by_type_question$Type=="TS",]$Rating)
median(rating_by_type_question[rating_by_type_question$Type=="TS",]$Rating) + 2*mad(rating_by_type_question[rating_by_type_question$Type=="TS",]$Rating)
sort(rating_by_type_question[rating_by_type_question$Type=="TS",]$Rating)
#------
7680/120
sort(unique(final$subject))
median(rating_by_type_question[rating_by_type_question$Type=="FA",]$Rating) - 2.5*mad(rating_by_type_question[rating_by_type_question$Type=="FA",]$Rating)
median(rating_by_type_question[rating_by_type_question$Type=="FA",]$Rating) + 2.5*mad(rating_by_type_question[rating_by_type_question$Type=="FA",]$Rating)
sort(rating_by_type_question[rating_by_type_question$Type=="FA",]$Rating)
median(rating_by_type_question[rating_by_type_question$Type=="UI",]$Rating) - 2.5*mad(rating_by_type_question[rating_by_type_question$Type=="UI",]$Rating)
median(rating_by_type_question[rating_by_type_question$Type=="UI",]$Rating) + 2.5*mad(rating_by_type_question[rating_by_type_question$Type=="UI",]$Rating)
sort(rating_by_type_question[rating_by_type_question$Type=="UI",]$Rating)
median(rating_by_type_question[rating_by_type_question$Type=="TA",]$Rating) - 2.5*mad(rating_by_type_question[rating_by_type_question$Type=="TA",]$Rating)
median(rating_by_type_question[rating_by_type_question$Type=="TA",]$Rating) + 2.5*mad(rating_by_type_question[rating_by_type_question$Type=="TA",]$Rating)
sort(rating_by_type_question[rating_by_type_question$Type=="TA",]$Rating)
median(rating_by_type_question[rating_by_type_question$Type=="TS",]$Rating) - 2.5*mad(rating_by_type_question[rating_by_type_question$Type=="TS",]$Rating)
median(rating_by_type_question[rating_by_type_question$Type=="TS",]$Rating) + 2.5*mad(rating_by_type_question[rating_by_type_question$Type=="TS",]$Rating)
sort(rating_by_type_question[rating_by_type_question$Type=="TS",]$Rating)
m7 <- lmer(rating ~ type*guise + (1 | subject) + (1 | sentence), data=final[final$sentence %!in% c("All trees have leaves.",
"Some greenhouses grow plants.",
"Some birds can talk.",
"Some gyms have machines.",
"Some monkeys have two hands with thumbs."),])
summary(m7)
final$guise <- factor(final$guise, levels = c("Human", "Cylinder", "Furhat"))
final$type <- factor(final$type, levels = c("UI", "FA", "TA", "TS"))
# Statistical models w/ sum coding
m7 <- lmer(rating ~ type*guise + (1 | subject) + (1 | sentence), data=final[final$sentence %!in% c("All trees have leaves.",
"Some greenhouses grow plants.",
"Some birds can talk.",
"Some gyms have machines.",
"Some monkeys have two hands with thumbs."),])
summary(m7)
final <- final[final$sentence %!in% c("All trees have leaves.",
"Some greenhouses grow plants.",
"Some birds can talk.",
"Some gyms have machines.",
"Some monkeys have two hands with thumbs."),]
115*64
final_UI_cf <- final[final$type=="UI" & final$guise %in% c("Cylinder", "Furhat"),]
final_UI_ch <- final[final$type=="UI" & final$guise %in% c("Cylinder", "Human"),]
final_UI_fh <- final[final$type=="UI" & final$guise %in% c("Furhat", "Human"),]
m8a <- lmer(rating ~ guise + (1|subject) + (1|sentence), data=final_UI_cf)
summary(m8a)
m8b <- lmer(rating ~ guise + (1|subject) + (1|sentence), data=final_UI_ch)
summary(m8b)
m8c <- lmer(rating ~ guise + (1|subject) + (1|sentence), data=final_UI_fh)
summary(m8c)
.05/12
rating_by_subject_guise_type <- as.data.frame(final[final$sentence %!in% c("All trees have leaves.",
"Some greenhouses grow plants.",
"Some birds can talk.",
"Some gyms have machines."),] %>%
group_by(subject, guise, type) %>% summarize(mean(rating)))
colnames(rating_by_subject_guise_type) <- c("Subject", "Guise", "Type", "Rating")
# Empty vectors (to be filled in with the for loop code below)
cylinder_greater_human_UI <- c()
cylinder_minus_human_UI <- c()
# Loop through every subject
for (i in unique(final$subject)) {
# Create a subset of the "rating_by_subject_guise_type" data frame for each subject
test <- rating_by_subject_guise_type[rating_by_subject_guise_type$Subject == i,]
# Find the mean ratings for the three guises for each subject
cylinder <- test[test$Guise=="Cylinder" & test$Type=="UI",]$Rating
human <- test[test$Guise=="Human" & test$Type=="UI",]$Rating
# Add True to the vector if the mean cylinder rating was greater than the mean human rating
cylinder_greater_human_UI <- c(cylinder_greater_human_UI, cylinder>human)
# Add the difference in the mean ratings to the vector
cylinder_minus_human_UI <- c(cylinder_minus_human_UI, cylinder-human)
}
# Summary statistics
sum(cylinder_greater_human_UI)
summary(cylinder_minus_human_UI)
boxplot(cylinder_minus_human_UI)
hist(cylinder_minus_human_UI)
33/64
# Empty vectors (to be filled in with the for loop code below)
cylinder_greater_human_UI <- c()
cylinder_minus_human_UI <- c()
# Loop through every subject
for (i in unique(final$subject)) {
# Create a subset of the "rating_by_subject_guise_type" data frame for each subject
test <- rating_by_subject_guise_type[rating_by_subject_guise_type$Subject == i,]
# Find the mean ratings for the three guises for each subject
cylinder <- test[test$Guise=="Cylinder" & test$Type=="UI",]$Rating
human <- test[test$Guise=="Furhat" & test$Type=="UI",]$Rating
# Add True to the vector if the mean cylinder rating was greater than the mean human rating
cylinder_greater_human_UI <- c(cylinder_greater_human_UI, cylinder>human)
# Add the difference in the mean ratings to the vector
cylinder_minus_human_UI <- c(cylinder_minus_human_UI, cylinder-human)
}
# Summary statistics
sum(cylinder_greater_human_UI)
summary(cylinder_minus_human_UI)
boxplot(cylinder_minus_human_UI)
hist(cylinder_minus_human_UI)
#----------------------------------
